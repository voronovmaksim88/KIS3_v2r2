# Указываем базовый образ
FROM python:3.12-slim

# Устанавливаем рабочую директорию
WORKDIR /app

# Устанавливаем poetry
RUN pip install poetry

# Копируем файлы pyproject.toml и poetry.lock (если есть)
COPY pyproject.toml poetry.lock* ./

# Устанавливаем зависимости
RUN poetry config virtualenvs.create false \
    && poetry install --no-dev --no-interaction --no-ansi

#Эти флаги в команде poetry install имеют следующие значения:
#--no-dev:
#Устанавливает только основные зависимости проекта, игнорируя зависимости для разработки (dev dependencies).
#Это полезно для продакшн-окружений, где не нужны инструменты разработки и тестирования.
#
#--no-interaction:
#Запрещает интерактивные запросы во время установки.
#Полезно в автоматизированных средах, где невозможно ответить на запросы вручную.
#
#--no-ansi:
#Отключает вывод ANSI-кодов (цветной вывод).
#Это может быть полезно в некоторых средах, где цветной вывод может вызвать проблемы или не поддерживается.
#
#Использование этих флагов в Dockerfile имеет следующие преимущества:
#--no-dev уменьшает размер итогового образа, включая только необходимые для работы приложения зависимости.
#--no-interaction гарантирует, что процесс сборки не остановится, ожидая ввода пользователя.
#--no-ansi обеспечивает чистый, легко читаемый вывод в логах сборки.
#
#Эти флаги помогают сделать процесс сборки Docker-образа более надежным, \
#    быстрым и подходящим для автоматизированных процессов CI/CD. \

# Копируем остальные файлы проекта
COPY . .

# Указываем команду для запуска приложения
CMD ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
